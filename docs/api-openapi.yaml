openapi: 3.0.0
info:
  title: Mirroronline Management API
  version: 1.0.0

servers:
  - url: http://127.0.0.1:8000

components:
  securitySchemes:
    apikeyAuth:
      type: http
      scheme: apikey

security:
  - apikeyAuth: []

paths:
  /api/profile/comment/:
    post:
      tags:
        - comment
      summary: Create a new comment.
      description: Create a comment for a specific article.
      parameters:
        - name: profile_id
          in: query
          schema:
            type: integer
          required: true
          description: ID of the author (profile).
          example: 1
        - name: article_id
          in: query
          schema:
            type: integer
          required: true
          description: ID of the article.
          example: 42
        - name: parent_comment_id
          in: query
          schema:
            type: integer
          required: false
          description: ID of the parent comment for replies (optional).
          example: 10
        - name: public
          in: query
          schema:
            type: boolean
          required: true
          description: Is the comment visible for all users?
          example: 10
        - name: condition_id
          in: query
          schema:
            type: integer
          required: false
          description: Experimental condition
          example: 10
        - name: content
          in: query
          schema:
            type: string
          required: true
          description: The content of the comment.
          example: "This is a sample comment."
      responses:
        "201":
          description: Successful comment creation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Comment created successfully"
                  comment_id:
                    type: integer
                    example: 123
        "400":
          description: Bad request - Missing or invalid fields.
        "404":
          description: Resource not found - Profile or article does not exist.

    delete:
      tags:
        - comment
      summary: Delete a comment.
      description: Deletes an existing comment by ID.
      parameters:
        - name: comment_id
          in: query
          schema:
            type: integer
          required: true
          description: ID of the comment to delete.
          example: 123
      responses:
        "200":
          description: Successful comment deletion.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Comment deleted successfully"
        "400":
          description: Bad request - Missing or invalid comment ID.
        "404":
          description: Comment not found.

  /api/user:
    post:
      tags:
        - default
      summary: Creates a new user and associated profile.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      parameters:
        - name: username
          in: query
          schema:
            type: string
          description: The username of the user.
          example: Matella
        - name: password
          in: query
          schema:
            type: string
          description: The password of the user.
          example: test
        - name: email
          in: query
          schema:
            type: string
          description: The email of the user.
          example: matella@example.com
      responses:
        "200":
          description: Successful response.
          content:
            application/json: {}